/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.27
 * Generated at: 2014-03-18 02:47:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.js.editor.ckeditor;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.liferay.portal.kernel.util.ContentTypes;
import com.liferay.portal.kernel.util.HtmlUtil;
import com.liferay.portal.kernel.util.ParamUtil;

public final class ckconfig_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

String cssPath = ParamUtil.getString(request, "cssPath");
String cssClasses = ParamUtil.getString(request, "cssClasses");
String languageId = ParamUtil.getString(request, "languageId");

response.setContentType(ContentTypes.TEXT_JAVASCRIPT);

      out.write("\n");
      out.write("\n");
      out.write("if (!CKEDITOR.stylesSet.get('liferayStyles')) {\n");
      out.write("\tCKEDITOR.addStylesSet(\n");
      out.write("\t\t'liferayStyles',\n");
      out.write("\t\t[\n");
      out.write("\n");
      out.write("\t\t// Block Styles\n");
      out.write("\n");
      out.write("\t\t{name: 'Normal', element: 'p'},\n");
      out.write("\t\t{name: 'Heading 1', element: 'h1'},\n");
      out.write("\t\t{name: 'Heading 2', element: 'h2'},\n");
      out.write("\t\t{name: 'Heading 3', element: 'h3'},\n");
      out.write("\t\t{name: 'Heading 4', element: 'h4'},\n");
      out.write("\n");
      out.write("\t\t// Special classes\n");
      out.write("\n");
      out.write("\t\t{name: 'Preformatted Text', element:'pre'},\n");
      out.write("\t\t{name: 'Cited Work', element:'cite'},\n");
      out.write("\t\t{name: 'Computer Code', element:'code'},\n");
      out.write("\n");
      out.write("\t\t// Custom styles\n");
      out.write("\n");
      out.write("\t\t{name: 'Info Message', element: 'div', attributes: {'class': 'portlet-msg-info'}},\n");
      out.write("\t\t{name: 'Alert Message', element: 'div', attributes: {'class': 'portlet-msg-alert'}},\n");
      out.write("\t\t{name: 'Error Message', element: 'div', attributes: {'class': 'portlet-msg-error'}}\n");
      out.write("\t\t]\n");
      out.write("\t);\n");
      out.write("}\n");
      out.write("\n");
      out.write("CKEDITOR.config.bodyClass = 'html-editor ");
      out.print( HtmlUtil.escapeJS(cssClasses) );
      out.write("';\n");
      out.write("\n");
      out.write("CKEDITOR.config.contentsCss = '");
      out.print( HtmlUtil.escapeJS(cssPath) );
      out.write("/main.css';\n");
      out.write("\n");
      out.write("CKEDITOR.config.entities = false;\n");
      out.write("\n");
      out.write("CKEDITOR.config.height = 265;\n");
      out.write("\n");
      out.write("CKEDITOR.config.language = '");
      out.print( HtmlUtil.escapeJS(languageId) );
      out.write("';\n");
      out.write("\n");
      out.write("CKEDITOR.config.stylesCombo_stylesSet = 'liferayStyles';\n");
      out.write("\n");
      out.write("CKEDITOR.config.toolbar_editInPlace = [\n");
      out.write("\t['Styles'],\n");
      out.write("\t['Bold', 'Italic', 'Underline', 'Strike'],\n");
      out.write("\t['Subscript', 'Superscript', 'SpecialChar'],\n");
      out.write("\t['Undo', 'Redo'],\n");
      out.write("\t['SpellChecker', 'Scayt'],\n");
      out.write("\t['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'], ['Source', 'RemoveFormat'],\n");
      out.write("];\n");
      out.write("\n");
      out.write("CKEDITOR.config.toolbar_email = [\n");
      out.write("\t['FontSize', 'TextColor', 'BGColor', '-', 'Bold', 'Italic', 'Underline', 'Strike'],\n");
      out.write("\t['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],\n");
      out.write("\t['SpellChecker', 'Scayt'],\n");
      out.write("\t'/',\n");
      out.write("\t['Undo', 'Redo', '-', 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'SelectAll', 'RemoveFormat'],\n");
      out.write("\t['Source'],\n");
      out.write("\t['Link', 'Unlink'],\n");
      out.write("\t['Image']\n");
      out.write("];\n");
      out.write("\n");
      out.write("CKEDITOR.config.toolbar_liferay = [\n");
      out.write("\t['Styles', 'FontSize', '-', 'TextColor', 'BGColor'],\n");
      out.write("\t['Bold', 'Italic', 'Underline', 'Strike'],\n");
      out.write("\t['Subscript', 'Superscript'],\n");
      out.write("\t'/',\n");
      out.write("\t['Undo', 'Redo', '-', 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'SelectAll', 'RemoveFormat'],\n");
      out.write("\t['Find', 'Replace', 'SpellChecker', 'Scayt'],\n");
      out.write("\t['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent'],\n");
      out.write("\t['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],\n");
      out.write("\t'/',\n");
      out.write("\t['Source'],\n");
      out.write("\t['Link', 'Unlink', 'Anchor'],\n");
      out.write("\t['Image', 'Flash', 'Table', '-', 'Smiley', 'SpecialChar']\n");
      out.write("];\n");
      out.write("\n");
      out.write("CKEDITOR.config.toolbar_liferayArticle = [\n");
      out.write("\t['Styles', 'FontSize', '-', 'TextColor', 'BGColor'],\n");
      out.write("\t['Bold', 'Italic', 'Underline', 'Strike'],\n");
      out.write("\t['Subscript', 'Superscript'],\n");
      out.write("\t'/',\n");
      out.write("\t['Undo', 'Redo', '-', 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'SelectAll', 'RemoveFormat'],\n");
      out.write("\t['Find', 'Replace', 'SpellChecker', 'Scayt'],\n");
      out.write("\t['NumberedList','BulletedList','-','Outdent','Indent','Blockquote'],\n");
      out.write("\t['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],\n");
      out.write("\t'/',\n");
      out.write("\t['Source'],\n");
      out.write("\t['Link', 'Unlink', 'Anchor'],\n");
      out.write("\t['Image', 'Flash', 'Table', '-', 'Smiley', 'SpecialChar', 'LiferayPageBreak']\n");
      out.write("];");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

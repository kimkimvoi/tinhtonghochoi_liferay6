/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fsoft.bn.model.impl;

import com.fsoft.bn.model.Organizations;
import com.fsoft.bn.model.OrganizationsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Organizations service. Represents a row in the &quot;BN_Organizations&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fsoft.bn.model.OrganizationsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrganizationsImpl}.
 * </p>
 *
 * @author FSOFT
 * @see OrganizationsImpl
 * @see com.fsoft.bn.model.Organizations
 * @see com.fsoft.bn.model.OrganizationsModel
 * @generated
 */
public class OrganizationsModelImpl extends BaseModelImpl<Organizations>
	implements OrganizationsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a organizations model instance should use the {@link com.fsoft.bn.model.Organizations} interface instead.
	 */
	public static final String TABLE_NAME = "BN_Organizations";
	public static final Object[][] TABLE_COLUMNS = {
			{ "organizations_id", Types.BIGINT },
			{ "organizations_name", Types.VARCHAR },
			{ "organizations_description", Types.VARCHAR },
			{ "organizations_address", Types.VARCHAR },
			{ "deleted", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table BN_Organizations (organizations_id LONG not null primary key,organizations_name VARCHAR(255) null,organizations_description STRING null,organizations_address VARCHAR(255) null,deleted BOOLEAN,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table BN_Organizations";
	public static final String ORDER_BY_JPQL = " ORDER BY organizations.organizations_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BN_Organizations.organizations_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fsoft.bn.model.Organizations"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fsoft.bn.model.Organizations"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.fsoft.bn.model.Organizations"),
			true);
	public static long DELETED_COLUMN_BITMASK = 1L;
	public static long ORGANIZATIONS_NAME_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fsoft.bn.model.Organizations"));

	public OrganizationsModelImpl() {
	}

	public long getPrimaryKey() {
		return _organizations_id;
	}

	public void setPrimaryKey(long primaryKey) {
		setOrganizations_id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_organizations_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Organizations.class;
	}

	public String getModelClassName() {
		return Organizations.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("organizations_id", getOrganizations_id());
		attributes.put("organizations_name", getOrganizations_name());
		attributes.put("organizations_description",
			getOrganizations_description());
		attributes.put("organizations_address", getOrganizations_address());
		attributes.put("deleted", getDeleted());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long organizations_id = (Long)attributes.get("organizations_id");

		if (organizations_id != null) {
			setOrganizations_id(organizations_id);
		}

		String organizations_name = (String)attributes.get("organizations_name");

		if (organizations_name != null) {
			setOrganizations_name(organizations_name);
		}

		String organizations_description = (String)attributes.get(
				"organizations_description");

		if (organizations_description != null) {
			setOrganizations_description(organizations_description);
		}

		String organizations_address = (String)attributes.get(
				"organizations_address");

		if (organizations_address != null) {
			setOrganizations_address(organizations_address);
		}

		Boolean deleted = (Boolean)attributes.get("deleted");

		if (deleted != null) {
			setDeleted(deleted);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	public long getOrganizations_id() {
		return _organizations_id;
	}

	public void setOrganizations_id(long organizations_id) {
		_columnBitmask = -1L;

		_organizations_id = organizations_id;
	}

	public String getOrganizations_name() {
		if (_organizations_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizations_name;
		}
	}

	public void setOrganizations_name(String organizations_name) {
		_columnBitmask |= ORGANIZATIONS_NAME_COLUMN_BITMASK;

		if (_originalOrganizations_name == null) {
			_originalOrganizations_name = _organizations_name;
		}

		_organizations_name = organizations_name;
	}

	public String getOriginalOrganizations_name() {
		return GetterUtil.getString(_originalOrganizations_name);
	}

	public String getOrganizations_description() {
		if (_organizations_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizations_description;
		}
	}

	public void setOrganizations_description(String organizations_description) {
		_organizations_description = organizations_description;
	}

	public String getOrganizations_address() {
		if (_organizations_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _organizations_address;
		}
	}

	public void setOrganizations_address(String organizations_address) {
		_organizations_address = organizations_address;
	}

	public boolean getDeleted() {
		return _deleted;
	}

	public boolean isDeleted() {
		return _deleted;
	}

	public void setDeleted(boolean deleted) {
		_columnBitmask |= DELETED_COLUMN_BITMASK;

		if (!_setOriginalDeleted) {
			_setOriginalDeleted = true;

			_originalDeleted = _deleted;
		}

		_deleted = deleted;
	}

	public boolean getOriginalDeleted() {
		return _originalDeleted;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Organizations.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Organizations toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Organizations)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		OrganizationsImpl organizationsImpl = new OrganizationsImpl();

		organizationsImpl.setOrganizations_id(getOrganizations_id());
		organizationsImpl.setOrganizations_name(getOrganizations_name());
		organizationsImpl.setOrganizations_description(getOrganizations_description());
		organizationsImpl.setOrganizations_address(getOrganizations_address());
		organizationsImpl.setDeleted(getDeleted());
		organizationsImpl.setCreateDate(getCreateDate());
		organizationsImpl.setModifiedDate(getModifiedDate());

		organizationsImpl.resetOriginalValues();

		return organizationsImpl;
	}

	public int compareTo(Organizations organizations) {
		int value = 0;

		if (getOrganizations_id() < organizations.getOrganizations_id()) {
			value = -1;
		}
		else if (getOrganizations_id() > organizations.getOrganizations_id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Organizations organizations = null;

		try {
			organizations = (Organizations)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = organizations.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OrganizationsModelImpl organizationsModelImpl = this;

		organizationsModelImpl._originalOrganizations_name = organizationsModelImpl._organizations_name;

		organizationsModelImpl._originalDeleted = organizationsModelImpl._deleted;

		organizationsModelImpl._setOriginalDeleted = false;

		organizationsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Organizations> toCacheModel() {
		OrganizationsCacheModel organizationsCacheModel = new OrganizationsCacheModel();

		organizationsCacheModel.organizations_id = getOrganizations_id();

		organizationsCacheModel.organizations_name = getOrganizations_name();

		String organizations_name = organizationsCacheModel.organizations_name;

		if ((organizations_name != null) && (organizations_name.length() == 0)) {
			organizationsCacheModel.organizations_name = null;
		}

		organizationsCacheModel.organizations_description = getOrganizations_description();

		String organizations_description = organizationsCacheModel.organizations_description;

		if ((organizations_description != null) &&
				(organizations_description.length() == 0)) {
			organizationsCacheModel.organizations_description = null;
		}

		organizationsCacheModel.organizations_address = getOrganizations_address();

		String organizations_address = organizationsCacheModel.organizations_address;

		if ((organizations_address != null) &&
				(organizations_address.length() == 0)) {
			organizationsCacheModel.organizations_address = null;
		}

		organizationsCacheModel.deleted = getDeleted();

		Date createDate = getCreateDate();

		if (createDate != null) {
			organizationsCacheModel.createDate = createDate.getTime();
		}
		else {
			organizationsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			organizationsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			organizationsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return organizationsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{organizations_id=");
		sb.append(getOrganizations_id());
		sb.append(", organizations_name=");
		sb.append(getOrganizations_name());
		sb.append(", organizations_description=");
		sb.append(getOrganizations_description());
		sb.append(", organizations_address=");
		sb.append(getOrganizations_address());
		sb.append(", deleted=");
		sb.append(getDeleted());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.fsoft.bn.model.Organizations");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>organizations_id</column-name><column-value><![CDATA[");
		sb.append(getOrganizations_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizations_name</column-name><column-value><![CDATA[");
		sb.append(getOrganizations_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizations_description</column-name><column-value><![CDATA[");
		sb.append(getOrganizations_description());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizations_address</column-name><column-value><![CDATA[");
		sb.append(getOrganizations_address());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deleted</column-name><column-value><![CDATA[");
		sb.append(getDeleted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Organizations.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Organizations.class
		};
	private long _organizations_id;
	private String _organizations_name;
	private String _originalOrganizations_name;
	private String _organizations_description;
	private String _organizations_address;
	private boolean _deleted;
	private boolean _originalDeleted;
	private boolean _setOriginalDeleted;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private Organizations _escapedModelProxy;
}
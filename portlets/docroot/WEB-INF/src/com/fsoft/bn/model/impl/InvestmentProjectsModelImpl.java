/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fsoft.bn.model.impl;

import com.fsoft.bn.model.InvestmentProjects;
import com.fsoft.bn.model.InvestmentProjectsModel;
import com.fsoft.bn.model.InvestmentProjectsSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the InvestmentProjects service. Represents a row in the &quot;BN_InvestmentProjects&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fsoft.bn.model.InvestmentProjectsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link InvestmentProjectsImpl}.
 * </p>
 *
 * @author FSOFT
 * @see InvestmentProjectsImpl
 * @see com.fsoft.bn.model.InvestmentProjects
 * @see com.fsoft.bn.model.InvestmentProjectsModel
 * @generated
 */
@JSON(strict = true)
public class InvestmentProjectsModelImpl extends BaseModelImpl<InvestmentProjects>
	implements InvestmentProjectsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a investment projects model instance should use the {@link com.fsoft.bn.model.InvestmentProjects} interface instead.
	 */
	public static final String TABLE_NAME = "BN_InvestmentProjects";
	public static final Object[][] TABLE_COLUMNS = {
			{ "project_id", Types.VARCHAR },
			{ "project_name", Types.VARCHAR },
			{ "total_investment_min", Types.VARCHAR },
			{ "total_investment_max", Types.VARCHAR },
			{ "implementation_location", Types.VARCHAR },
			{ "start_time", Types.TIMESTAMP },
			{ "end_time", Types.TIMESTAMP },
			{ "project_purpose", Types.VARCHAR },
			{ "charter_capital", Types.VARCHAR },
			{ "project_category_id", Types.VARCHAR },
			{ "project_status_id", Types.VARCHAR },
			{ "investment_form_id", Types.VARCHAR },
			{ "competent_organization_id", Types.VARCHAR },
			{ "key_project", Types.BOOLEAN },
			{ "technical_specifications", Types.VARCHAR },
			{ "currency_type_id", Types.VARCHAR },
			{ "created_date", Types.TIMESTAMP },
			{ "modified_date", Types.TIMESTAMP },
			{ "deleted", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table BN_InvestmentProjects (project_id VARCHAR(75) not null primary key,project_name VARCHAR(255) null,total_investment_min VARCHAR(75) null,total_investment_max VARCHAR(75) null,implementation_location VARCHAR(255) null,start_time DATE null,end_time DATE null,project_purpose STRING null,charter_capital VARCHAR(75) null,project_category_id VARCHAR(75) null,project_status_id VARCHAR(75) null,investment_form_id VARCHAR(75) null,competent_organization_id VARCHAR(75) null,key_project BOOLEAN,technical_specifications STRING null,currency_type_id VARCHAR(75) null,created_date DATE null,modified_date DATE null,deleted BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table BN_InvestmentProjects";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.fsoft.bn.model.InvestmentProjects"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.fsoft.bn.model.InvestmentProjects"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static InvestmentProjects toModel(InvestmentProjectsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		InvestmentProjects model = new InvestmentProjectsImpl();

		model.setProject_id(soapModel.getProject_id());
		model.setProject_name(soapModel.getProject_name());
		model.setTotal_investment_min(soapModel.getTotal_investment_min());
		model.setTotal_investment_max(soapModel.getTotal_investment_max());
		model.setImplementation_location(soapModel.getImplementation_location());
		model.setStart_time(soapModel.getStart_time());
		model.setEnd_time(soapModel.getEnd_time());
		model.setProject_purpose(soapModel.getProject_purpose());
		model.setCharter_capital(soapModel.getCharter_capital());
		model.setProject_category_id(soapModel.getProject_category_id());
		model.setProject_status_id(soapModel.getProject_status_id());
		model.setInvestment_form_id(soapModel.getInvestment_form_id());
		model.setCompetent_organization_id(soapModel.getCompetent_organization_id());
		model.setKey_project(soapModel.getKey_project());
		model.setTechnical_specifications(soapModel.getTechnical_specifications());
		model.setCurrency_type_id(soapModel.getCurrency_type_id());
		model.setCreated_date(soapModel.getCreated_date());
		model.setModified_date(soapModel.getModified_date());
		model.setDeleted(soapModel.getDeleted());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<InvestmentProjects> toModels(
		InvestmentProjectsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<InvestmentProjects> models = new ArrayList<InvestmentProjects>(soapModels.length);

		for (InvestmentProjectsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.fsoft.bn.model.InvestmentProjects"));

	public InvestmentProjectsModelImpl() {
	}

	public String getPrimaryKey() {
		return _project_id;
	}

	public void setPrimaryKey(String primaryKey) {
		setProject_id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return _project_id;
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	public Class<?> getModelClass() {
		return InvestmentProjects.class;
	}

	public String getModelClassName() {
		return InvestmentProjects.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("project_id", getProject_id());
		attributes.put("project_name", getProject_name());
		attributes.put("total_investment_min", getTotal_investment_min());
		attributes.put("total_investment_max", getTotal_investment_max());
		attributes.put("implementation_location", getImplementation_location());
		attributes.put("start_time", getStart_time());
		attributes.put("end_time", getEnd_time());
		attributes.put("project_purpose", getProject_purpose());
		attributes.put("charter_capital", getCharter_capital());
		attributes.put("project_category_id", getProject_category_id());
		attributes.put("project_status_id", getProject_status_id());
		attributes.put("investment_form_id", getInvestment_form_id());
		attributes.put("competent_organization_id",
			getCompetent_organization_id());
		attributes.put("key_project", getKey_project());
		attributes.put("technical_specifications", getTechnical_specifications());
		attributes.put("currency_type_id", getCurrency_type_id());
		attributes.put("created_date", getCreated_date());
		attributes.put("modified_date", getModified_date());
		attributes.put("deleted", getDeleted());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String project_id = (String)attributes.get("project_id");

		if (project_id != null) {
			setProject_id(project_id);
		}

		String project_name = (String)attributes.get("project_name");

		if (project_name != null) {
			setProject_name(project_name);
		}

		String total_investment_min = (String)attributes.get(
				"total_investment_min");

		if (total_investment_min != null) {
			setTotal_investment_min(total_investment_min);
		}

		String total_investment_max = (String)attributes.get(
				"total_investment_max");

		if (total_investment_max != null) {
			setTotal_investment_max(total_investment_max);
		}

		String implementation_location = (String)attributes.get(
				"implementation_location");

		if (implementation_location != null) {
			setImplementation_location(implementation_location);
		}

		Date start_time = (Date)attributes.get("start_time");

		if (start_time != null) {
			setStart_time(start_time);
		}

		Date end_time = (Date)attributes.get("end_time");

		if (end_time != null) {
			setEnd_time(end_time);
		}

		String project_purpose = (String)attributes.get("project_purpose");

		if (project_purpose != null) {
			setProject_purpose(project_purpose);
		}

		String charter_capital = (String)attributes.get("charter_capital");

		if (charter_capital != null) {
			setCharter_capital(charter_capital);
		}

		String project_category_id = (String)attributes.get(
				"project_category_id");

		if (project_category_id != null) {
			setProject_category_id(project_category_id);
		}

		String project_status_id = (String)attributes.get("project_status_id");

		if (project_status_id != null) {
			setProject_status_id(project_status_id);
		}

		String investment_form_id = (String)attributes.get("investment_form_id");

		if (investment_form_id != null) {
			setInvestment_form_id(investment_form_id);
		}

		String competent_organization_id = (String)attributes.get(
				"competent_organization_id");

		if (competent_organization_id != null) {
			setCompetent_organization_id(competent_organization_id);
		}

		Boolean key_project = (Boolean)attributes.get("key_project");

		if (key_project != null) {
			setKey_project(key_project);
		}

		String technical_specifications = (String)attributes.get(
				"technical_specifications");

		if (technical_specifications != null) {
			setTechnical_specifications(technical_specifications);
		}

		String currency_type_id = (String)attributes.get("currency_type_id");

		if (currency_type_id != null) {
			setCurrency_type_id(currency_type_id);
		}

		Date created_date = (Date)attributes.get("created_date");

		if (created_date != null) {
			setCreated_date(created_date);
		}

		Date modified_date = (Date)attributes.get("modified_date");

		if (modified_date != null) {
			setModified_date(modified_date);
		}

		Boolean deleted = (Boolean)attributes.get("deleted");

		if (deleted != null) {
			setDeleted(deleted);
		}
	}

	@JSON
	public String getProject_id() {
		if (_project_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _project_id;
		}
	}

	public void setProject_id(String project_id) {
		_project_id = project_id;
	}

	@JSON
	public String getProject_name() {
		if (_project_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _project_name;
		}
	}

	public void setProject_name(String project_name) {
		_project_name = project_name;
	}

	@JSON
	public String getTotal_investment_min() {
		if (_total_investment_min == null) {
			return StringPool.BLANK;
		}
		else {
			return _total_investment_min;
		}
	}

	public void setTotal_investment_min(String total_investment_min) {
		_total_investment_min = total_investment_min;
	}

	@JSON
	public String getTotal_investment_max() {
		if (_total_investment_max == null) {
			return StringPool.BLANK;
		}
		else {
			return _total_investment_max;
		}
	}

	public void setTotal_investment_max(String total_investment_max) {
		_total_investment_max = total_investment_max;
	}

	@JSON
	public String getImplementation_location() {
		if (_implementation_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _implementation_location;
		}
	}

	public void setImplementation_location(String implementation_location) {
		_implementation_location = implementation_location;
	}

	@JSON
	public Date getStart_time() {
		return _start_time;
	}

	public void setStart_time(Date start_time) {
		_start_time = start_time;
	}

	@JSON
	public Date getEnd_time() {
		return _end_time;
	}

	public void setEnd_time(Date end_time) {
		_end_time = end_time;
	}

	@JSON
	public String getProject_purpose() {
		if (_project_purpose == null) {
			return StringPool.BLANK;
		}
		else {
			return _project_purpose;
		}
	}

	public void setProject_purpose(String project_purpose) {
		_project_purpose = project_purpose;
	}

	@JSON
	public String getCharter_capital() {
		if (_charter_capital == null) {
			return StringPool.BLANK;
		}
		else {
			return _charter_capital;
		}
	}

	public void setCharter_capital(String charter_capital) {
		_charter_capital = charter_capital;
	}

	@JSON
	public String getProject_category_id() {
		if (_project_category_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _project_category_id;
		}
	}

	public void setProject_category_id(String project_category_id) {
		_project_category_id = project_category_id;
	}

	@JSON
	public String getProject_status_id() {
		if (_project_status_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _project_status_id;
		}
	}

	public void setProject_status_id(String project_status_id) {
		_project_status_id = project_status_id;
	}

	@JSON
	public String getInvestment_form_id() {
		if (_investment_form_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _investment_form_id;
		}
	}

	public void setInvestment_form_id(String investment_form_id) {
		_investment_form_id = investment_form_id;
	}

	@JSON
	public String getCompetent_organization_id() {
		if (_competent_organization_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _competent_organization_id;
		}
	}

	public void setCompetent_organization_id(String competent_organization_id) {
		_competent_organization_id = competent_organization_id;
	}

	@JSON
	public boolean getKey_project() {
		return _key_project;
	}

	public boolean isKey_project() {
		return _key_project;
	}

	public void setKey_project(boolean key_project) {
		_key_project = key_project;
	}

	@JSON
	public String getTechnical_specifications() {
		if (_technical_specifications == null) {
			return StringPool.BLANK;
		}
		else {
			return _technical_specifications;
		}
	}

	public void setTechnical_specifications(String technical_specifications) {
		_technical_specifications = technical_specifications;
	}

	@JSON
	public String getCurrency_type_id() {
		if (_currency_type_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency_type_id;
		}
	}

	public void setCurrency_type_id(String currency_type_id) {
		_currency_type_id = currency_type_id;
	}

	@JSON
	public Date getCreated_date() {
		return _created_date;
	}

	public void setCreated_date(Date created_date) {
		_created_date = created_date;
	}

	@JSON
	public Date getModified_date() {
		return _modified_date;
	}

	public void setModified_date(Date modified_date) {
		_modified_date = modified_date;
	}

	@JSON
	public boolean getDeleted() {
		return _deleted;
	}

	public boolean isDeleted() {
		return _deleted;
	}

	public void setDeleted(boolean deleted) {
		_deleted = deleted;
	}

	@Override
	public InvestmentProjects toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (InvestmentProjects)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		InvestmentProjectsImpl investmentProjectsImpl = new InvestmentProjectsImpl();

		investmentProjectsImpl.setProject_id(getProject_id());
		investmentProjectsImpl.setProject_name(getProject_name());
		investmentProjectsImpl.setTotal_investment_min(getTotal_investment_min());
		investmentProjectsImpl.setTotal_investment_max(getTotal_investment_max());
		investmentProjectsImpl.setImplementation_location(getImplementation_location());
		investmentProjectsImpl.setStart_time(getStart_time());
		investmentProjectsImpl.setEnd_time(getEnd_time());
		investmentProjectsImpl.setProject_purpose(getProject_purpose());
		investmentProjectsImpl.setCharter_capital(getCharter_capital());
		investmentProjectsImpl.setProject_category_id(getProject_category_id());
		investmentProjectsImpl.setProject_status_id(getProject_status_id());
		investmentProjectsImpl.setInvestment_form_id(getInvestment_form_id());
		investmentProjectsImpl.setCompetent_organization_id(getCompetent_organization_id());
		investmentProjectsImpl.setKey_project(getKey_project());
		investmentProjectsImpl.setTechnical_specifications(getTechnical_specifications());
		investmentProjectsImpl.setCurrency_type_id(getCurrency_type_id());
		investmentProjectsImpl.setCreated_date(getCreated_date());
		investmentProjectsImpl.setModified_date(getModified_date());
		investmentProjectsImpl.setDeleted(getDeleted());

		investmentProjectsImpl.resetOriginalValues();

		return investmentProjectsImpl;
	}

	public int compareTo(InvestmentProjects investmentProjects) {
		String primaryKey = investmentProjects.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		InvestmentProjects investmentProjects = null;

		try {
			investmentProjects = (InvestmentProjects)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		String primaryKey = investmentProjects.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<InvestmentProjects> toCacheModel() {
		InvestmentProjectsCacheModel investmentProjectsCacheModel = new InvestmentProjectsCacheModel();

		investmentProjectsCacheModel.project_id = getProject_id();

		String project_id = investmentProjectsCacheModel.project_id;

		if ((project_id != null) && (project_id.length() == 0)) {
			investmentProjectsCacheModel.project_id = null;
		}

		investmentProjectsCacheModel.project_name = getProject_name();

		String project_name = investmentProjectsCacheModel.project_name;

		if ((project_name != null) && (project_name.length() == 0)) {
			investmentProjectsCacheModel.project_name = null;
		}

		investmentProjectsCacheModel.total_investment_min = getTotal_investment_min();

		String total_investment_min = investmentProjectsCacheModel.total_investment_min;

		if ((total_investment_min != null) &&
				(total_investment_min.length() == 0)) {
			investmentProjectsCacheModel.total_investment_min = null;
		}

		investmentProjectsCacheModel.total_investment_max = getTotal_investment_max();

		String total_investment_max = investmentProjectsCacheModel.total_investment_max;

		if ((total_investment_max != null) &&
				(total_investment_max.length() == 0)) {
			investmentProjectsCacheModel.total_investment_max = null;
		}

		investmentProjectsCacheModel.implementation_location = getImplementation_location();

		String implementation_location = investmentProjectsCacheModel.implementation_location;

		if ((implementation_location != null) &&
				(implementation_location.length() == 0)) {
			investmentProjectsCacheModel.implementation_location = null;
		}

		Date start_time = getStart_time();

		if (start_time != null) {
			investmentProjectsCacheModel.start_time = start_time.getTime();
		}
		else {
			investmentProjectsCacheModel.start_time = Long.MIN_VALUE;
		}

		Date end_time = getEnd_time();

		if (end_time != null) {
			investmentProjectsCacheModel.end_time = end_time.getTime();
		}
		else {
			investmentProjectsCacheModel.end_time = Long.MIN_VALUE;
		}

		investmentProjectsCacheModel.project_purpose = getProject_purpose();

		String project_purpose = investmentProjectsCacheModel.project_purpose;

		if ((project_purpose != null) && (project_purpose.length() == 0)) {
			investmentProjectsCacheModel.project_purpose = null;
		}

		investmentProjectsCacheModel.charter_capital = getCharter_capital();

		String charter_capital = investmentProjectsCacheModel.charter_capital;

		if ((charter_capital != null) && (charter_capital.length() == 0)) {
			investmentProjectsCacheModel.charter_capital = null;
		}

		investmentProjectsCacheModel.project_category_id = getProject_category_id();

		String project_category_id = investmentProjectsCacheModel.project_category_id;

		if ((project_category_id != null) &&
				(project_category_id.length() == 0)) {
			investmentProjectsCacheModel.project_category_id = null;
		}

		investmentProjectsCacheModel.project_status_id = getProject_status_id();

		String project_status_id = investmentProjectsCacheModel.project_status_id;

		if ((project_status_id != null) && (project_status_id.length() == 0)) {
			investmentProjectsCacheModel.project_status_id = null;
		}

		investmentProjectsCacheModel.investment_form_id = getInvestment_form_id();

		String investment_form_id = investmentProjectsCacheModel.investment_form_id;

		if ((investment_form_id != null) && (investment_form_id.length() == 0)) {
			investmentProjectsCacheModel.investment_form_id = null;
		}

		investmentProjectsCacheModel.competent_organization_id = getCompetent_organization_id();

		String competent_organization_id = investmentProjectsCacheModel.competent_organization_id;

		if ((competent_organization_id != null) &&
				(competent_organization_id.length() == 0)) {
			investmentProjectsCacheModel.competent_organization_id = null;
		}

		investmentProjectsCacheModel.key_project = getKey_project();

		investmentProjectsCacheModel.technical_specifications = getTechnical_specifications();

		String technical_specifications = investmentProjectsCacheModel.technical_specifications;

		if ((technical_specifications != null) &&
				(technical_specifications.length() == 0)) {
			investmentProjectsCacheModel.technical_specifications = null;
		}

		investmentProjectsCacheModel.currency_type_id = getCurrency_type_id();

		String currency_type_id = investmentProjectsCacheModel.currency_type_id;

		if ((currency_type_id != null) && (currency_type_id.length() == 0)) {
			investmentProjectsCacheModel.currency_type_id = null;
		}

		Date created_date = getCreated_date();

		if (created_date != null) {
			investmentProjectsCacheModel.created_date = created_date.getTime();
		}
		else {
			investmentProjectsCacheModel.created_date = Long.MIN_VALUE;
		}

		Date modified_date = getModified_date();

		if (modified_date != null) {
			investmentProjectsCacheModel.modified_date = modified_date.getTime();
		}
		else {
			investmentProjectsCacheModel.modified_date = Long.MIN_VALUE;
		}

		investmentProjectsCacheModel.deleted = getDeleted();

		return investmentProjectsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{project_id=");
		sb.append(getProject_id());
		sb.append(", project_name=");
		sb.append(getProject_name());
		sb.append(", total_investment_min=");
		sb.append(getTotal_investment_min());
		sb.append(", total_investment_max=");
		sb.append(getTotal_investment_max());
		sb.append(", implementation_location=");
		sb.append(getImplementation_location());
		sb.append(", start_time=");
		sb.append(getStart_time());
		sb.append(", end_time=");
		sb.append(getEnd_time());
		sb.append(", project_purpose=");
		sb.append(getProject_purpose());
		sb.append(", charter_capital=");
		sb.append(getCharter_capital());
		sb.append(", project_category_id=");
		sb.append(getProject_category_id());
		sb.append(", project_status_id=");
		sb.append(getProject_status_id());
		sb.append(", investment_form_id=");
		sb.append(getInvestment_form_id());
		sb.append(", competent_organization_id=");
		sb.append(getCompetent_organization_id());
		sb.append(", key_project=");
		sb.append(getKey_project());
		sb.append(", technical_specifications=");
		sb.append(getTechnical_specifications());
		sb.append(", currency_type_id=");
		sb.append(getCurrency_type_id());
		sb.append(", created_date=");
		sb.append(getCreated_date());
		sb.append(", modified_date=");
		sb.append(getModified_date());
		sb.append(", deleted=");
		sb.append(getDeleted());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.fsoft.bn.model.InvestmentProjects");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>project_id</column-name><column-value><![CDATA[");
		sb.append(getProject_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>project_name</column-name><column-value><![CDATA[");
		sb.append(getProject_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>total_investment_min</column-name><column-value><![CDATA[");
		sb.append(getTotal_investment_min());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>total_investment_max</column-name><column-value><![CDATA[");
		sb.append(getTotal_investment_max());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>implementation_location</column-name><column-value><![CDATA[");
		sb.append(getImplementation_location());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>start_time</column-name><column-value><![CDATA[");
		sb.append(getStart_time());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>end_time</column-name><column-value><![CDATA[");
		sb.append(getEnd_time());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>project_purpose</column-name><column-value><![CDATA[");
		sb.append(getProject_purpose());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>charter_capital</column-name><column-value><![CDATA[");
		sb.append(getCharter_capital());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>project_category_id</column-name><column-value><![CDATA[");
		sb.append(getProject_category_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>project_status_id</column-name><column-value><![CDATA[");
		sb.append(getProject_status_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>investment_form_id</column-name><column-value><![CDATA[");
		sb.append(getInvestment_form_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>competent_organization_id</column-name><column-value><![CDATA[");
		sb.append(getCompetent_organization_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key_project</column-name><column-value><![CDATA[");
		sb.append(getKey_project());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>technical_specifications</column-name><column-value><![CDATA[");
		sb.append(getTechnical_specifications());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency_type_id</column-name><column-value><![CDATA[");
		sb.append(getCurrency_type_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>created_date</column-name><column-value><![CDATA[");
		sb.append(getCreated_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modified_date</column-name><column-value><![CDATA[");
		sb.append(getModified_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deleted</column-name><column-value><![CDATA[");
		sb.append(getDeleted());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = InvestmentProjects.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			InvestmentProjects.class
		};
	private String _project_id;
	private String _project_name;
	private String _total_investment_min;
	private String _total_investment_max;
	private String _implementation_location;
	private Date _start_time;
	private Date _end_time;
	private String _project_purpose;
	private String _charter_capital;
	private String _project_category_id;
	private String _project_status_id;
	private String _investment_form_id;
	private String _competent_organization_id;
	private boolean _key_project;
	private String _technical_specifications;
	private String _currency_type_id;
	private Date _created_date;
	private Date _modified_date;
	private boolean _deleted;
	private InvestmentProjects _escapedModelProxy;
}